var OP_STATUS = {
  NONE: 'none',
  PULLING: 'pulling',
  ACTIVE: 'active',
  LOADING: 'loading'
};
var CONFIG = {
  damping: 150,
  distanceToRefresh: 50
}
var show_Indicator = false;
var STATUS = OP_STATUS.NONE;
var initialY = 0;

function indicatorToggle(ins) {
  if (!show_Indicator) return
  if(STATUS === OP_STATUS.ACTIVE) {
   return ins.callMethod('updateDampText', { act: true })
  }
  ins.callMethod('updateDampText', { act: false })
};

function changeStatus(status) {
  STATUS = status;
}
function toggleAnimate(status, ele) {
  if (status) {
    ele.addClass('animateEase');
  } else {
    if (ele.hasClass('animateEase')) {
      ele.removeClass('animateEase');
    }
  }
}
function easing(offset, damping, distanceToRefresh) {
  return offset > distanceToRefresh
    ? Math.min(damping, offset / (1 + Math.abs(offset) * 0.002))
    : offset;
}

function moveY(deltaY, body) {
  body.setStyle({
    transform: 'translate3d(0, ' + deltaY + 'px, 0)'
  });
}

function handleTouchStart(evt, ins) {
  // if (STATUS !== OP_STATUS.NONE) return true
  var body = ins.selectComponent('.bodyView');
  var indicator = ins.selectComponent('.indicator');
  CONFIG = body.getDataset().config;
  show_Indicator = indicator.getDataset().config;
  initialY = evt.touches[0].clientY;
  indicator.removeClass('hide')
  toggleAnimate(false, body)
}

function handleTouchMove(evt, ins) {
  if (STATUS === OP_STATUS.LOADING) return false;
  var body = ins.selectComponent('.bodyView');
  var y = evt.touches[0].clientY;
  var deltaY = easing(y - initialY, CONFIG.damping, CONFIG.distanceToRefresh);

  if (deltaY >= CONFIG.distanceToRefresh) {
    indicatorToggle(ins)
    changeStatus(OP_STATUS.ACTIVE)
  } else {
    indicatorToggle(ins)
    changeStatus(OP_STATUS.PULLING)
  }
  if (deltaY>0) {
    moveY(deltaY, body)
  }
  return false
  // 不往上冒泡，相当于调用了同时调用了stopPropagation和preventDefault
}

function handleTouchEnd(evt, ins) {
  if (STATUS === OP_STATUS.ACTIVE) {
    changeStatus(OP_STATUS.LOADING)
    ins.callMethod('onRefresh')
  } else {
    settleDown(ins)
  }
}

function finish(now, pre, ins) {
  if (pre && !now) {
    settleDown(ins)
  }
}
function settleDown (ins) {
  var body = ins.selectComponent('.bodyView');
  var indicator = ins.selectComponent('.indicator');
  toggleAnimate(true,body)
  indicator.addClass('hide')
  moveY(0, body)
  body.requestAnimationFrame(function () {
    changeStatus(OP_STATUS.NONE)
  })
}
module.exports = {
  // triggerRefresh: triggerRefresh,
  handleTouchStart: handleTouchStart,
  handleTouchMove: handleTouchMove,
  finish: finish,
  handleTouchEnd: handleTouchEnd
};
